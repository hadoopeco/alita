akka {
  log-config-on-start = on
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  loglevel = "INFO"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
      log-remote-lifecycle-events = on
      netty.tcp {
        hostname = ""
        port = 2551
      }
   }

  cluster {
    seed-nodes = []

    auto-down = on

    //roles=["backend","frontend"]
    pub-sub {

      # Actor name of the mediator actor, /system/distributedPubSubMediator

      name = distributedPubSubMediator

      # Start the mediator on members tagged with this role.

      # All members are used if undefined or empty.

      role = ""

      # The routing logic to use for 'Send'

      # Possible values: random, round-robin, broadcast

      routing-logic = random

      # How often the DistributedPubSubMediator should send out gossip information

      gossip-interval = 1s

      # Removed entries are pruned after this duration

      removed-time-to-live = 120s

      # Maximum number of elements to transfer in one message when synchronizing the registries.

      # Next chunk will be transferred in next round of gossip.

      max-delta-elements = 3000

      # The id of the dispatcher to use for DistributedPubSubMediator actors.

      # If not specified default dispatcher is used.

      # If specified you need to define the settings of the actual dispatcher.

      use-dispatcher = ""

    }
  }

  akka.extensions = ["akka.cluster.pubsub.DistributedPubSub"]
}
